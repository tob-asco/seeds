// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using seeds.Api.Data;

#nullable disable

namespace seeds.Api.Migrations
{
    [DbContext(typeof(seedsApiContext))]
    [Migration("20230815163028_new_entity_family")]
    partial class new_entity_family
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("seeds.Dal.Model.CatopicUserPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CategoryKey")
                        .IsRequired()
                        .HasColumnType("character varying(6)")
                        .HasColumnName("category_key");

                    b.Property<string>("TagName")
                        .HasColumnType("text")
                        .HasColumnName("topic_name");

                    b.Property<Guid?>("TagsId")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<string>("UsersUsername")
                        .HasColumnType("text");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("TagsId");

                    b.HasIndex("UsersUsername");

                    b.HasIndex("CategoryKey", "Username", "TagName")
                        .IsUnique();

                    b.ToTable("category_user");
                });

            modelBuilder.Entity("seeds.Dal.Model.Category", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Key");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("seeds.Dal.Model.Family", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CategoryKey")
                        .IsRequired()
                        .HasColumnType("character varying(6)")
                        .HasColumnName("category_key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryKey");

                    b.ToTable("families");
                });

            modelBuilder.Entity("seeds.Dal.Model.Idea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_time");

                    b.Property<string>("CreatorName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("creator");

                    b.Property<string>("Slide1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slide1");

                    b.Property<string>("Slide2")
                        .HasColumnType("text")
                        .HasColumnName("slide2");

                    b.Property<string>("Slide3")
                        .HasColumnType("text")
                        .HasColumnName("slide3");

                    b.Property<string>("Slogan")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slogan");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("CreatorName");

                    b.ToTable("ideas");
                });

            modelBuilder.Entity("seeds.Dal.Model.IdeaTag", b =>
                {
                    b.Property<int>("IdeaId")
                        .HasColumnType("integer")
                        .HasColumnName("idea_id");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("topic_id");

                    b.HasKey("IdeaId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("idea_topic");
                });

            modelBuilder.Entity("seeds.Dal.Model.Presentation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("IdeaId")
                        .HasColumnType("integer")
                        .HasColumnName("idea_id");

                    b.HasKey("Id");

                    b.HasIndex("IdeaId")
                        .IsUnique();

                    b.ToTable("presentations");
                });

            modelBuilder.Entity("seeds.Dal.Model.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CategoryKey")
                        .IsRequired()
                        .HasColumnType("character varying(6)")
                        .HasColumnName("category_key");

                    b.Property<Guid?>("FamilyId")
                        .HasColumnType("uuid")
                        .HasColumnName("family_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.HasIndex("CategoryKey", "Name")
                        .IsUnique();

                    b.ToTable("topics");
                });

            modelBuilder.Entity("seeds.Dal.Model.User", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.HasKey("Username");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("seeds.Dal.Model.UserIdeaInteraction", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<int>("IdeaId")
                        .HasColumnType("integer")
                        .HasColumnName("idea_id");

                    b.Property<bool>("Downvoted")
                        .HasColumnType("boolean")
                        .HasColumnName("downvoted");

                    b.Property<bool>("Upvoted")
                        .HasColumnType("boolean")
                        .HasColumnName("upvoted");

                    b.HasKey("Username", "IdeaId");

                    b.HasIndex("IdeaId");

                    b.ToTable("user_idea");
                });

            modelBuilder.Entity("seeds.Dal.Model.CatopicUserPreference", b =>
                {
                    b.HasOne("seeds.Dal.Model.Category", null)
                        .WithMany("CatopicUserPreferences")
                        .HasForeignKey("CategoryKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("seeds.Dal.Model.Tag", null)
                        .WithMany("CatopicUserPreferences")
                        .HasForeignKey("TagsId");

                    b.HasOne("seeds.Dal.Model.User", null)
                        .WithMany("CatopicUserPreferences")
                        .HasForeignKey("UsersUsername");
                });

            modelBuilder.Entity("seeds.Dal.Model.Family", b =>
                {
                    b.HasOne("seeds.Dal.Model.Category", null)
                        .WithMany("Families")
                        .HasForeignKey("CategoryKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("seeds.Dal.Model.Idea", b =>
                {
                    b.HasOne("seeds.Dal.Model.User", "Creator")
                        .WithMany("CreatedIdeas")
                        .HasForeignKey("CreatorName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("seeds.Dal.Model.IdeaTag", b =>
                {
                    b.HasOne("seeds.Dal.Model.Idea", null)
                        .WithMany()
                        .HasForeignKey("IdeaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("seeds.Dal.Model.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("seeds.Dal.Model.Presentation", b =>
                {
                    b.HasOne("seeds.Dal.Model.Idea", null)
                        .WithOne()
                        .HasForeignKey("seeds.Dal.Model.Presentation", "IdeaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("seeds.Dal.Model.Tag", b =>
                {
                    b.HasOne("seeds.Dal.Model.Category", "Category")
                        .WithMany("Tags")
                        .HasForeignKey("CategoryKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("seeds.Dal.Model.Family", "Family")
                        .WithMany("Tags")
                        .HasForeignKey("FamilyId");

                    b.Navigation("Category");

                    b.Navigation("Family");
                });

            modelBuilder.Entity("seeds.Dal.Model.UserIdeaInteraction", b =>
                {
                    b.HasOne("seeds.Dal.Model.Idea", null)
                        .WithMany()
                        .HasForeignKey("IdeaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("seeds.Dal.Model.User", null)
                        .WithMany()
                        .HasForeignKey("Username")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("seeds.Dal.Model.Category", b =>
                {
                    b.Navigation("CatopicUserPreferences");

                    b.Navigation("Families");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("seeds.Dal.Model.Family", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("seeds.Dal.Model.Tag", b =>
                {
                    b.Navigation("CatopicUserPreferences");
                });

            modelBuilder.Entity("seeds.Dal.Model.User", b =>
                {
                    b.Navigation("CatopicUserPreferences");

                    b.Navigation("CreatedIdeas");
                });
#pragma warning restore 612, 618
        }
    }
}
