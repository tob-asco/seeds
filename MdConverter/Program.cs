using seeds.Dal.Model;

public class Program
{
    public static void Main()
    {
        char familyChar = ':';

        /// Read the content of the file
        string mdTopicsIn = "../../../../topics.md";
        string mdIdeasIn = "../../../../idea-seeds.md";
        string csOut = "../../../../seeds.Api/Data/AutoGeneratedDataSeeder.cs";
        List<string> topicsLines = File.ReadAllLines(mdTopicsIn).ToList();
        List<string> ideasLines = File.ReadAllLines(mdIdeasIn).ToList();
        StreamWriter writer = new(csOut, false);

        // Define variables to store data here
        List<Category> Cats = new();
        List<Topic> Topics = new();
        List<Family> Fams = new();
        List<Idea> Ideas = new();

        #region topics.md
        string catKey = null!;
        string catName = null!;
        string famName = null!;
        int probablePreference = 0;
        List<string> famTopicsString = new();
        List<Topic> famTopics = new();

        writer.WriteLine("using seeds.Dal.Model;");
        writer.WriteLine("");
        writer.WriteLine("namespace seeds.Api.Data;");
        writer.WriteLine("");
        writer.WriteLine("/// <summary>");
        writer.WriteLine("/// In VS22, press Ctrl+K Ctrl+D to indent the code nicely.");
        writer.WriteLine("/// (In VS22, pressing Ctrl+M Ctrl+L collapses everything.)");
        writer.WriteLine("/// Copy the function into the actual DataSeeder.cs");
        writer.WriteLine("/// Please check the file for errors, parsing might have not worked perfectly.");
        writer.WriteLine("/// </summary>");
        writer.WriteLine("public class AutoGeneratedFromMdFiles");
        writer.WriteLine("{");
        writer.WriteLine($"List<Category> Cats = new();");
        writer.WriteLine($"List<Family> Fams = new();");
        writer.WriteLine($"List<Topic> Topics = new();");
        writer.WriteLine($"List<Idea> Ideas = new();");
        writer.WriteLine("");
        writer.WriteLine("public void PopulateCatsFamsTopics() {");
        writer.WriteLine($"List<string> famTopicsString;");
        writer.WriteLine($"List<Topic> famTopics;");
        foreach (string line in topicsLines)
        {
            if (line.StartsWith("## `"))
            {
                if (catKey != null) { writer.WriteLine("#endregion"); }
                // Extract category key and name
                catKey = line.Split('`')[1].Split(' ')[0].Trim();
                catName = line.Split('`')[1].Split('-')[1].Trim();
                Cats.Add(new() { Key = catKey, Name = catName });
                writer.WriteLine("");
                writer.WriteLine($"#region {catKey} - {catName}");
                writer.WriteLine($"Cats.Add(new(){{ Key = \"{catKey}\", Name = \"{catName}\" }});");
            }
            else if (line.Split('`').Count() > 1 && line.Split('`')[0].Length < 9 && line.Split('`')[0].Contains('.') && line.Contains('{') && line.Contains('}') && line.Contains(familyChar))
            {
                writer.WriteLine("");
                // Extract family name
                famName = line.Split('`')[1].Split(familyChar)[0].Trim();
                // Extract family members
                famTopicsString = line.Split('`')[1].Split('{')[1].Split('}')[0].Split(',').ToList();
                // populate C# List<string>
                string wLine = "famTopicsString = new() { ";
                foreach (string s in famTopicsString) { wLine += $" \"{s.Trim()}\","; }
                wLine += " };";
                writer.WriteLine(wLine);
                // populate C# List<Topic>
                famTopics = famTopicsString.Select(name => new Topic()
                { CategoryKey = catKey, Name = $"{famName}{familyChar} {name.Trim()}" }).ToList();
                writer.WriteLine("famTopics = famTopicsString.Select(name => new Topic()");
                writer.WriteLine($"{{CategoryKey = \"{catKey}\", Name = $\"{famName}{familyChar} {{name.Trim()}}\"}}).ToList();");
                // add C# Family
                Fams.Add(new() { CategoryKey = catKey, Name = line.Split('`')[1].Split(familyChar)[0].Trim(), Topics = famTopics });
                writer.WriteLine($"Fams.Add(new(){{ CategoryKey = \"{catKey}\", Name = \"{line.Split('`')[1].Split(familyChar)[0].Trim()}\", Topics = famTopics }});");
                // add C# Topic of Family
                foreach (var topic in famTopics) { Topics.Add(topic); }
                writer.WriteLine("foreach(var topic in famTopics) { Topics.Add(topic); }");
            }
            else if (line.Split('`').Count() > 1 && line.Split('`')[0].Length < 9 && line.Split('`')[0].Contains('.'))
            {
                // populate C# Topic
                Topics.Add(new Topic { CategoryKey = catKey, Name = line.Split('`')[1] });
                writer.WriteLine($"Topics.Add(new() {{ CategoryKey = \"{catKey}\", Name = \"{line.Split('`')[1]}\" }});");
            }
            else if (line.Contains("- preference: "))
            {
                // Extract probable preference of the family
                probablePreference = Convert.ToInt16(line.Split(' ', StringSplitOptions.RemoveEmptyEntries)[^1]);
                Fams[^1].ProbablePreference = probablePreference;
                // add line of probablePreference to after all of the families tags
                writer.WriteLine($"Fams[^1].ProbablePreference = {probablePreference};");
                writer.WriteLine("");
            }
        }
        writer.WriteLine("#endregion");
        writer.WriteLine("}");
        writer.WriteLine("");
        #endregion

        #region idea-seeds.md
        string ideaSection = null!;
        string description = null!;
        string timeString = null!;
        string ideaStringOfTopics = null!;
        string topicName = null!;

        List<string> ideaTopicsString;
        List<Topic> ideaTopics = new();
        Idea vanillaIdea = new();

        writer.WriteLine("");
        writer.WriteLine("public void PopulateIdeas() {");
        writer.WriteLine($"List<Topic> ideaTopics = new();");
        for (int i = 0; i < ideasLines.Count; i++)
        {
            if (ideasLines[i].StartsWith("# "))
            {
                if (ideaSection != null) { writer.WriteLine("#endregion"); }
                // Extract idea section
                ideaSection = ideasLines[i].Split('#')[1].Trim();
                writer.WriteLine("");
                writer.WriteLine($"#region {ideaSection}");
            }
            else if (ideasLines[i].ToLower().Trim().StartsWith("- title: "))
            {
                // extract title
                Ideas[^1].Title = string.Join(":", ideasLines[i].Trim().Split(':').Skip(1)).Trim();
            }
            else if (ideasLines[i].ToLower().Trim().StartsWith("- slogan: "))
            {
                // extract slogan
                Ideas[^1].Slogan = string.Join(":", ideasLines[i].Trim().Split(':').Skip(1)).Trim();
            }
            else if (ideasLines[i].Trim().StartsWith("- {"))
            {
                // extract description
                description = "";
                ideasLines[i] = ideasLines[i].Trim().Substring(3);
                // we're in a possibly multi-line description
                while (!ideasLines[i].Trim().EndsWith("}"))
                {
                    description += ideasLines[i] + "\\n";
                    i++;
                }
                description += ideasLines[i].Trim().TrimEnd('}');

                Ideas[^1].Presentation = new() { Description = description };
            }
            else if (ideasLines[i].Trim().ToLower().StartsWith("- creationtime: "))
            {
                // extract DateTime as string like "2021-12-01"
                timeString = ideasLines[i].Split(":")[1].Trim();
            }
            else if (ideasLines[i].Trim().ToLower().StartsWith("- topics: "))
            {
                // extract list of topics:
                // first, cutoff "- topics: "
                ideaStringOfTopics = string.Join(":", ideasLines[i].Trim().Split(':').Skip(1)).Trim();

                // next, split list
                ideaTopicsString = ideaStringOfTopics.Split(';').ToList();

                // next, convert to actual topics
                // here, exceptions are thrown if the tags don't exist
                foreach (var s in ideaTopicsString)
                {
                    if (Topics.Where(t => t.Name == s.Trim()).Count() == 1)
                    {
                        catKey = Topics.First(t => t.Name == s.Trim()).CategoryKey;
                        topicName = Topics.First(t => t.CategoryKey == catKey &&
                                t.Name == s.Trim()).Name;
                    }
                    else if (s.Contains(':'))
                    {
                        catKey = Cats.First(c => c.Key == s.Split(':')[0].Trim()).Key;
                        topicName = Topics.First(t => t.CategoryKey == catKey &&
                                t.Name == s.Split(":")[1].Trim()).Name;
                    }
                    else
                    {
                        throw new Exception($"There exist " +
                                $"{Topics.Where(t => t.Name == s.Trim()).Count()}" +
                                $"tags with the name '{s.Trim()}'. " +
                                "The format is like \"CAT: family: topicname\".");
                    }
                    ideaTopics.Add(new()
                    {
                        CategoryKey = catKey,
                        Name = topicName
                    });
                }
            }
            if (ideasLines[i].StartsWith("## ") || i == ideasLines.Count - 1)
            {
                // Add last idea
                if (Ideas.Count > 0)
                {
                    if (Ideas[^1].Title == vanillaIdea.Title)
                    { throw new Exception("Title is Vanilla, please provide a \"- Title: \""); }
                    if (Ideas[^1].Slogan == vanillaIdea.Slogan)
                    { throw new Exception("Slogan is Vanilla, please provide a \"- Slogan: \""); }
                    writer.WriteLine($"Ideas.Add(new(){{");
                    writer.WriteLine($"{nameof(Idea.Title)} = \"{Ideas[^1].Title}\",");
                    writer.WriteLine($"{nameof(Idea.Slogan)} = \"{Ideas[^1].Slogan}\",");
                    writer.WriteLine($"{nameof(Idea.Presentation)} = new() {{ " +
                        $"{nameof(Presentation.Description)} = " +
                        $"\"{Ideas[^1].Presentation.Description.Replace("\"", "\\\"")}\" }},");
                    if (timeString == "")
                    {
                        writer.WriteLine($"{nameof(Idea.CreationTime)} = " +
                            $"DateTime.ParseExact({timeString},\"yyyy-MM-dd\", CultureInfo.InvariantCulture),");
                    }
                    if (ideaTopics.Count > 0)
                    {
                        writer.WriteLine($"{nameof(Idea.Topics)} = new() {{");
                        foreach (var topic in ideaTopics)
                        {
                            writer.WriteLine($"\t\t\t\tTopics.First(t => " +
                                $"t.{nameof(Topic.CategoryKey)} == \"{topic.CategoryKey}\" " +
                                $"&& t.{nameof(Topic.Name)} == \"{topic.Name}\"),");
                        }
                        writer.Write("\t\t\t}");
                    }
                    writer.WriteLine("});");
                }
                // Add placeholder for new ideas
                Ideas.Add(new());
                ideaTopics = new();
                timeString = "";
            }
        }
        writer.WriteLine("#endregion");
        writer.WriteLine("}");
        writer.WriteLine("");
        #endregion

        writer.WriteLine("}");
        writer.Close();
        writer.Dispose();
    }
}
