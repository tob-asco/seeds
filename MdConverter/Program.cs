using seeds.Dal.Model;

public class Program
{
    public static void Main()
    {

        char familyChar = ':';
        // Read the content of the file
        string mdFileIn = "../../../../topics.md";
        string csFileOut = "../../../../seeds.Api/Data/AutoGeneratedDataSeeder.cs";
        List<string> lines = File.ReadAllLines(mdFileIn).ToList();
        StreamWriter writer = new(csFileOut);

        // Define variables to store topics and category
        List<Topic> Topics = new();
        List<Family> Fams = new();
        string catKey = null!;
        int probablePreference = 0;

        writer.WriteLine("using seeds.Dal.Model;");
        writer.WriteLine("");
        writer.WriteLine("namespace seeds.Api.Data;");
        writer.WriteLine("");
        writer.WriteLine("public class AutoGenerated");
        writer.WriteLine("{");
        writer.WriteLine($"List<string> famTopicsString {{ get; set; }}");
        writer.WriteLine($"List<Topic> famTopics;");
        writer.WriteLine($"List<Topic> Topics = new();");
        writer.WriteLine($"List<Family> Fams = new();");
        writer.WriteLine("");
        writer.WriteLine("public void AutoSeed() {");
        writer.WriteLine("");
        foreach (string line in lines)
        {
            if (line.StartsWith("## `"))
            {
                // Extract category key
                catKey = line.Split('`')[1].Split(' ')[0].Trim();
                writer.WriteLine("");
                writer.WriteLine($"// {catKey}");
            }
            else if (line.Split('`').Count() > 1 && line.Split('`')[0].Length < 9 && line.Split('`')[0].Contains('.') && line.Contains('{') && line.Contains('}') && line.Contains(familyChar))
            {
                // Extract family members
                List<string> famTopicsNames = line.Split('`')[1].Split('{')[1].Split('}')[0].Split(',').ToList();
                // populate C# List<string>
                string wLine = "famTopicsString = new() { ";
                foreach (string topicName in famTopicsNames) { wLine += $" \"{topicName.Trim()}\","; }
                wLine += " };";
                writer.WriteLine(wLine);
                // populate C# List<Topic>
                //writer.WriteLine("famTopics = new();");
                writer.WriteLine("famTopics = famTopicsString.Select(name => new Topic()");
                writer.WriteLine($"{{CategoryKey = \"{catKey}\", Name = name.Trim()}}).ToList();");
                writer.WriteLine($"famTopics = famTopicsString.Select(name => new Topic()");
                List<Topic> famTopics = famTopicsNames.Select(name => new Topic()
                { CategoryKey = catKey, Name = name.Trim() }).ToList();
                // add C# Family
                Fams.Add(new() { CategoryKey = catKey, Name = line.Split('`')[1].Split(familyChar)[0].Trim(), Topics = famTopics });
                writer.WriteLine($"Fams.Add(new(){{ CategoryKey = \"{catKey}\", Name = \"{Fams[^1].Name}\", Topics = famTopics");
                // add C# Topic of Family
                writer.WriteLine("foreach(var topic in famTopics) { Topics.Add(topic); }");
                foreach (var topic in famTopics) { Topics.Add(topic); }
            }
            else if (line.Split('`').Count() > 1 && line.Split('`')[0].Length < 9 && line.Split('`')[0].Contains('.'))
            {
                // populate C# Topic
                Topics.Add(new Topic { CategoryKey = catKey, Name = line.Split('`')[1] });
                writer.WriteLine($"Topics.Add(new() {{ CategoryKey = \"{catKey}\", Name = \"{Topics[^1].Name}\" }});");
            }
            else if (line.Contains("- preference: "))
            {
                // Extract probable preference of the family
                probablePreference = Convert.ToInt16(line.Split(' ', StringSplitOptions.RemoveEmptyEntries)[^1]);
                Fams[^1].ProbablePreference = probablePreference;
                // add line of probablePreference to after all of the families tags
                writer.WriteLine($"Fams[^1].ProbablePreference = {probablePreference};");
            }
        }
        writer.WriteLine("}}");
    }
}
